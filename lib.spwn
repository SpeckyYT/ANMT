extract obj_props

// https://github.com/SpeckyYT/SPWN-canvas
canvas = import '../canvas/canvas.spwn'
// https://github.com/SpeckyYT/SPWN-speed
speed = import '../speed/speed.spwn'

ANMT = (
    filename:@string,
    x:@number = 0,
    y:@number = 0,
    scaling:@number = 1,
    groups:[@group]|@group = [],
    playerSpeed:@number = 1,
    startdelay:@number = 0,
    enddelay:@number = 0,
    use_groups:@bool = false,
    log:@bool = true,
){
    let file = regex("\\r").replace(
        $.readfile(filename),
        ''
    )
    let mySpeed = speed(playerSpeed)
    let frames = file.split('\n')
    let data = frames.shift().split(',')
    let width = data[0] as @number
    let height = data[1] as @number
    let fps = data[2] as @number
    videoCanvas = canvas::new(
        x, y,
        width, height,
        $.floor(100*scaling)/100,
        groups
    )
    for index in ..frames.length {
        if log {
            $.print('{} frames done ({}%)'.fmt([index,100*index/(frames.length-1)]))
        }
        let frame = frames[index]
        let toChange = []
        for pixel in frame.split(':') {
            pixelData = pixel.split(',')
            if pixelData.length <= 4 {continue}
            [ x, y, r, g, b ] = pixelData.map(v => v as @number)
            toChange.push([
                videoCanvas.colors[x][height-(y+1)],
                r,g,b
            ])
        }
        currentTime = index * 1/fps + startdelay
        if use_groups {
            call_with_delay(currentTime, !{
                for i in ..toChange.length {
                    [ c, r, g, b ] = toChange[i]
                    c.set(r,g,b)
                }
            })
        } else {
            for i in ..toChange.length {
                [ c, r, g, b ] = toChange[i]
                $.add(obj{
                    OBJ_ID: 899,
                    X:  currentTime * (30 * mySpeed),
                    Y: 30*i+30*20,
                    DURATION: 0,
                    TARGET_COLOR: c,
                    TRIGGER_RED: r,
                    TRIGGER_GREEN: g,
                    TRIGGER_BLUE: b,
                })
            }
        }
    }
    return {
        canvas: videoCanvas,
    }
}

return ANMT
