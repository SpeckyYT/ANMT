extract obj_props

// https://github.com/SpeckyYT/SPWN-canvas
import '../canvas/canvas.spwn'
// https://github.com/SpeckyYT/SPWN-speed
speed = import '../speed/speed.spwn'

numberize_array = (array:@array) => array.map(v => v as @number)

ceil_dec = (number:@number,precision:@number){
    base = 1 / precision
    return $.ceil(number * base) / base
}

type @ANMT
impl @ANMT {
    new: (
        filename:@string,
        x:@number = 0,
        y:@number = 0,
        scaling:@number = 1,
        groups:[@group]|@group = [],
        player_speed:@number = 1,
        use_lookup:@bool = false,
        use_groups:@bool = false,
        log:@bool = true,
    ){
        let file = regex("\\r").replace($.readfile(filename),'')
        let my_speed = speed(player_speed)
        let frames = file.split('\n')
        let data = frames.shift().split(',')
        let [ width, height, fps ] = numberize_array(data)
        lookup = counter(?i, bits = $.ceil($.log(frames.length,2)))
        status = counter(?i, bits = 2) // 2 bits are enough atm
        video_canvas = @canvas::new(
            x, y,
            width, height,
            scaling,
            groups,
            use_groups = use_groups,
        )
        for index in ..frames.length {
            if log {
                $.print('{} frames done ({}%)'.fmt([index,100*index/(frames.length-1)]))
            }
            let frame = frames[index]
            let to_change = []
            for pixel in frame.split(':') {
                pixel_data = pixel.split(',')
                if pixel_data.length <= 4 {continue}
                [ x, y, r, g, b ] = numberize_array(pixel_data)
                to_change.push([
                    video_canvas.colors[x][height-(y+1)],
                    r,g,b
                ])
            }
            current_time = index * 1/fps
            if use_lookup {
                on(lookup.reaches(index+1), !{
                    for i in ..to_change.length {
                        [ target, r, g, b ] = to_change[i]
                        -> switch target {
                            @color: target.set(r,g,b),
                            @group: target.pulse(r, g, b, hold = 9999),
                        }
                    }
                })
            } else {
                for i in ..to_change.length {
                    [ target, r, g, b ] = to_change[i]
                    let trig = obj{
                        X:  current_time * (30 * my_speed),
                        Y: 30*i+30*20,
                        DURATION: 0,
                        TRIGGER_RED: r,
                        TRIGGER_GREEN: g,
                        TRIGGER_BLUE: b,
                    }
                    switch target {
                        @color: (){
                            trig.set(OBJ_ID, 899)
                            trig.set(TARGET_COLOR, target)
                        }(),
                        @group: (){
                            trig.set(OBJ_ID, 1006)
                            trig.set(TARGET, target)
                            trig.set(TARGET_TYPE, 1)
                            trig.set(HOLD, 9999)
                        }(),
                    }
                    $.add(trig)
                }
            }
        }
        while_loop(() => true, (){
            switch status {
                case 0: null,
                case 1: (){
                    if lookup < frames.length {
                        lookup++
                    }
                }(),
                case 2: (){
                    if lookup > 0 {
                        lookup--
                    }
                }(),
            }
        }, delay = ceil_dec(1/fps,0.01))
        return @ANMT::{
            canvas: video_canvas,
            width: width,
            height: height,
            fps: fps,
            lookup: lookup,
            status: status,
        }
    },
    /*
    STATUS:
        0 = paused
        1 = playing
        2 = reverse
    */
    play: (self){
        self.status = 1
    },
    restart: (self){
        self.seek(0)
        self.status = 1
    },
    reverse: (self){
        self.status = 2
    },
    pause: (self){
        self.status = 0
    },
    seek: (self, frame:@number = 0){
        self.lookup = frame
    },
}

return @ANMT
